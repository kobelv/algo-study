package com.kobe.array;

/**
 * 1、在一个给定的从1到100的整型数组中，如何快速找到缺失的数字？
 *
 * 2、如何找到一个给定的整型数组中的重复数字？
 * -- 如果数组排好序了，遍历一遍就行
 * -- 如果数组没有排序，借助HashMap
 *
 * 3、在一个未排序的整型数组中，如何找到最大和最小的数字？
 *
 * 4、在一个整型数组中，如何找到一个所有成对的数字，满足它们的和等于一个给定的数字？
 * --参见本项目的LeetCode78_Subset1
 *
 * 5、从一个给定数组中删除重复元素？
 *
 * 6、如何利用快速排序对一个整型数组进行排序？
 *
 * 7、实现数组反转？
 *
 *
 */
public class ArrayIssues {

    /**
     * 1.1、在一个给定的从1到100连续数字的整型数组中，如何快速找到唯一缺失的那个数字？
     * 【思路】如果不缺失的话，所有数字的总和为sum1=n(n+1)/2，
     * 遍历数组把已有数字加总得到sum2，则缺失的数字为sum1-sum2
     *【时间复杂度】=O(n)，【空间复杂度】=O(1)

     * 1.2、在一个给定的从1到100的整型数组中，如何快速找到缺失的数字？
     *【思路】借助ArrayList或者HashMap，遍历数组把数字存起来，key=数字，value=1；
     * 遍历ArrayList或者HashMap，找到不存在的项
     *【时间复杂度】=O(n)，【空间复杂度】=O(n)
     */
    public int issue1(int[] arr){
        return 0;
    }
}
